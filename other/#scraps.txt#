	public void setChildAreaPanelFk(int childFk, int index) {
		int insertIndex = CHILDREN.pos + getNumChildren() * (Integer.SIZE >> 3);
		insertInt(insertIndex, childFk);

		int numChildren = getNumChildren();
		
		setInt(NUM_CHILDREN.pos, numChildren+1);
	}
	


			Point lp = new Point();

			toPixels(lp, pd.getStartCenterLatm(), pd.getStartCenterLonm(), stBox, drawingBitmap.getWidth(), 
					drawingBitmap.getHeight());

//			if(lp.x >= 0 && lp.x <= drawingBitmap.getWidth() && lp.y >= 0 && lp.y < drawingBitmap.getHeight() ||
//					p.x >= 0 && p.x <= drawingBitmap.getWidth() && p.y >= 0 && p.y < drawingBitmap.getHeight())
//				Log.d(GpsTrailer.TAG, "lp.x="+lp.x+", lp.y="+lp.y+", p.x="+p.x+", p.y="+p.y+" "+row);

			if(drawShadow)
				drawingCanvas.drawLine(lp.x, lp.y, p.x, p.y, shadowColor);
			else
				//we do averaging this wacky way to avoid integer overflow
				drawingCanvas.drawLine(lp.x, lp.y, p.x, p.y, paint[figurePaintIndex((row.getEndTimeSec() 
						- row.getStartTimeSec()) / 2 + row.getStartTimeSec())]);
		//TODO 2: handle changes to bubble sizes in different zoom areas. Maybe the speed mps should bubble up the tree????
		
		Log.d(GpsTrailer.TAG, "numPoints="+points+" time = "+(System.currentTimeMillis()-time));
		
		if(turnOnMethodTracing)
		{
			Debug.stopMethodTracing();
			turnOnMethodTracing = false;
		}
		
		//TODO 2: We should only allow tapping at a certain zoom level
		
		//TODO 2: make tapping work again
		//if the user tapped a point and we found at least one near gps point for it to represent
		if(bestNearClickRowPointDiamond != null)
		{
			/**
			 * The last location gps was calculated. Since the click from the user 
			 * dabbing their finger is kind of sloppy, we sort of guess what
			 * the user really meant to do when creating a new point
			 */
			lastCalculatedGpsLatM = (int) Math.round(bestNearClickRowPointDiamond.getEndCenterLatm());
			lastCalculatedGpsLonM = (int) Math.round(bestNearClickRowPointDiamond.getEndCenterLonm());
			
			
			//TODO 2: check for security purposes all log messages. Don't print out sensitive stuff
			Log.d(GpsTrailer.TAG, "tapped on row "+bestNearClickRowPoint);
			
			float [] results = new float[1];
			
			//TODO 2: if there is only one point in the area, what are we going to do?
			Location.
				distanceBetween(
						bestNearClickRowPointDiamond.getStartCenterLatm(),
						bestNearClickRowPointDiamond.getStartCenterLonm(),
						bestNearClickRowPointDiamond.getEndCenterLatm(),
						bestNearClickRowPointDiamond.getEndCenterLonm(),
						results);
			 
			lastCalculatedRadius = results[0];
			
			//create the user location bubble in the main thread
			myHandler.sendEmptyMessage(0);
		}
		
		//reset last tap point since we dealed with it
		overlay.lastTapGeoPoint = null;
		
		//hack to draw area panels
		if(!drawShadow)
		{
			for(AreaPanel ap : GTG.apCache.areaPanelsHack)
			{
				Point p1 = new Point();
				Point p2 = new Point();
				toPixels(p1, ap.getMinLatm(), ap.getMinLonm(), stBox, drawingBitmap.getWidth(), 
						drawingBitmap.getHeight());
				toPixels(p2, ap.getMinLatm() + ap.getLatmHeight(), ap.getMinLonm() + ap.getLonmWidth(), stBox, 
						drawingBitmap.getWidth(), drawingBitmap.getHeight());
				
				drawingCanvas.drawLine(p1.x, p1.y, p1.x, p2.y, paint[paint.length-1]);
				drawingCanvas.drawLine(p1.x, p2.y, p2.x, p2.y, paint[paint.length-1]);
				drawingCanvas.drawLine(p2.x, p2.y, p2.x, p1.y, paint[paint.length-1]);
				drawingCanvas.drawLine(p2.x, p1.y, p1.x, p1.y, paint[paint.length-1]);
				
			}
		}
